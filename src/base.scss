@import './parameter.scss';

/**
 * @name: pxToRem
 * @desc: px转换rem方法
 * @param {String} $px 像素值
 * @use: @include pxToRem(10px);
 * @return: {String} rem 像素对象转换的rem值;
 */
@function pxToRem($px) {
    @return $px * 1rem /16;
}

/**
 * @name: wh
 * @desc: 设置元素宽高,默认为宽高100%;
 * @param {String} $width 宽度
 * @param {String} $height 高度
 * @use: @include wh;
 * @use: @include wh(80%);
 * @use: @include wh(80%, 20px);
 */
@mixin wh($width:100%, $height:$width) {
    width: $width;
    height: $height;
}

/**
 * @name: full-contain
 * @desc: 宽高为100%
 * @use: @include full-contain;
 */
@mixin full-contain {
    width: 100%;
    height: 100%;
}

/**
 * @name: flexCenter
 * @desc: 弹性盒居中
 * @param {String} $justify 主轴对齐方式
 * @param {String} $align 副轴对齐方式
 * @use: @include flexCenter;
 * @use: @include flexCenter(space-around, center);
 */
@mixin flexCenter($justify:center, $align: center, $direction:false) {
    display: flex;

    @if($justify !=false) {
        justify-content: $justify;
    }

    @if($align !=false) {
        align-items: $align;
    }

    @if($direction !=false) {
        flex-direction: column;
    }
}

/**
 * @name: grid
 * @desc: 网格布局
 * @param {String} $columns 网格切割行数
 * @param {String} $rows 网格切割列数
 * @use: @include grid;
 * @use: @include grid(2, 2);
 */
@mixin grid($columns, $rows) {
    display: grid;

    @if $columns {
        grid-template-columns: repeat($columns, 1fr);
    }

    @if $rows {
        grid-template-rows: repeat($rows, 1fr);
    }

}

/**
 * @name: grid-item
 * @desc: 网格布局-格子设置
 * @param {String} $column-start 网格行起始点
 * @param {String} $column-end 网格行结束点
 * @param {String} $row-start 网格列起始点
 * @param {String} $row-end 网格列结束点
 * @use: @include grid-item(1, 2, 2, 2);
 */
@mixin grid-item($column-start, $column-end, $row-start, $row-end) {
    grid-column-start: $column-start;
    grid-column-end: $column-end;
    grid-row-start: $row-start;
    grid-row-end: $row-end;
}

/**
 * @name: modulewh
 * @desc: 平时调度-模块大小
 * @param {String} $widthList 宽度列表
 * @param {String} $className 类名
 * @use: @include modulewh(8 8 8); 表示有三列，每列占8格，共24格。
 */
@mixin modulewh($widthList, $className: module_) {
    $const-start: 1;
    $const-end: 1;
    $index: 0;

    @each $width in $widthList {
        $const-end: $const-start + $width;
        $index: $index + 1;

        .#{$className}#{$index} {
            @include grid-item(1, 2, $const-start, $const-end);

            &>div {
                @include wh;
            }
        }

        $const-start: $const-end;
    }
}

/**
 * @name: text-ellipsis
 * @desc: 单行文本溢出省略号
 * @use: @include text-ellipsis;
 */
@mixin text-ellipsis {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/**
 * @name: boxClamp
 * @desc: 多行文本溢出省略号
 * @param {Number} $row 行数
 * @use: @include boxClamp;
 * @use: @include boxClamp(2);
 */
@mixin boxClamp($row:3) {
    overflow: hidden;
    line-clamp: $row;
    box-orient: vertical;
    display: box;
}

/**
 * @name: position
 * @desc: 定位
 * @param {String} $position 定位方式
 * @param {String} $args 定位参数
 * @use: @include position(absolute,top 10px right 20px bottom 20px left 20px);
 */
@mixin position($position, $args) {
    position: $position;

    @each $o in top right bottom left {
        $i: index($args, $o);

        @if $i and $i+1 <=length($args) and type-of(nth($args, $i + 1))==number {
            #{$o}: nth($args, $i + 1);
        }
    }
}

/**
 * @name: fixed
 * @desc: 固定定位
 * @param {String} $position 定位方式
 * @param {String} $position 定位参数
 * @use: @include fixed(top-left); 上左
 * @use: @include fixed(top-center); 上中
 * @use: @include fixed(top-right); 上右
 * @use: @include fixed(center-left); 中左
 * @use: @include fixed(center-center); 中
 * @use: @include fixed(center); 中
 * @use: @include fixed(center-right); 中右
 * @use: @include fixed(bottom-left); 下左
 * @use: @include fixed(bottom-center); 下中
 * @use: @include fixed(bottom-right); 下右
 */
@mixin fixed($param:center) {
    @include location(fixed, $param);
}

/**
 * @name: absolute
 * @desc: 绝对定位
 * @param {String} $position 定位方式
 * @param {String} $position 定位参数
 * @use: @include absolute(top-left); 上左
 * @use: @include absolute(top-center); 上中
 * @use: @include absolute(top-right); 上右
 * @use: @include absolute(center-left); 中左
 * @use: @include absolute(center-center); 中
 * @use: @include absolute(center); 中
 * @use: @include absolute(center-right); 中右
 * @use: @include absolute(bottom-left); 下左
 * @use: @include absolute(bottom-center); 下中
 * @use: @include absolute(bottom-right); 下右
 */
@mixin absolute($param:center) {
    @include location(absolute, $param);
}

/**
 * @name: center-translate
 * @desc: 未知宽高的元素水平/垂直居中
 * @param {String} $direction 居中方式
 * @use: @include center-translate(both); 水平/垂直居中
 * @use: @include center-translate(horizontal); 水平居中
 * @use: @include center-translate(vertical); 垂直居中
 */
@mixin center-translate($direction: both) {
    position: absolute;

    @if $direction==both {
        top: 50%;
        left: 50%;
        transform: translate3d(-50%, -50%, 0);
    }

    @else if $direction==horizontal {
        left: 50%;
        transform: translate3d(-50%, 0, 0);
    }

    @else if $direction==vertical {
        top: 50%;
        transform: translate3d(0, -50%, 0);
    }
}

/**
 * @name: pointer-events
 * @desc: 点击穿透
 * @param {String} $pointer 穿透参数
 * @use: @include pointer-events;
 * @use: @include pointer-events(auto);
 */
@mixin pointer-events($pointer: none) {
    pointer-events: $pointer;
}

/**
 * @name: cursor
 * @desc: 鼠标样式
 * @param {String} $cursor 穿透参数
 * @use: @include cursor;
 * @use: @include cursor(auto);
 */
@mixin cursor($cursor: pointer) {
    cursor: $cursor;
}

/**
 * @name: css3
 * @desc: 浏览器前缀
 * @param {String} $property 属性名
 * @param {String} $property 属性值
 * @use: @include css3(transition, 0.5s all);
 */
@mixin css3($property, $value) {
    $browserPrefix: -webkit-,
        -moz-,
        -ms-,
        -o-,
        '';

    @each $prefix in $browserPrefix {
        #{$prefix}#{$property}: $value;
    }
}

/**
 * @name: bg-image
 * @desc: 背景图
 * @param {String} $image 图片路径
 * @param {String} $width 背景宽度
 * @param {String} $height 背景高度
 * @param {Boolean} $isUrl 是否带url()的地址 默认false
 * @use: @include bg-image('../../public/img/demo.png');
 * @use: @include bg-image('../../public/img/demo.png', cover);
 * @use: @include bg-image('../../public/img/demo.png', 100%);
 * @use: @include bg-image('../../public/img/demo.png', 100%, 80%);
 */
@mixin bg-image($image, $width:100%, $height:$width, $isUrl:false) {
    background-image: if($isUrl, $image, url($image));
    background-position: center;
    background-size: $width $height;
    background-repeat: no-repeat;
}

/**
 * @name: img
 * @desc: 给img标签设置样式和src，仅适用于img标签
 * @param {String} $url 图片地址
 * @param {String} $width img标签宽度
 * @param {String} $height img标签高度
 * @use: @include img('../../public/img/demo.png')
 * @use: @include img('../../public/img/demo.png', 100%)
 * @use: @include img('../../public/img/demo.png', 100px, 30px)
 */
@mixin img($url, $width:auto, $height:auto, $isUrl:false) {
    content: if($isUrl, $url, url($url));
    width: $width;
    height: $height;
    border: none;
    display: block;
}

/**
 * @name: regularTriangle
 * @desc: div边框实现正三角
 * @param {String} $direction 三角形方向
 * @param {String} $color 三角形颜色
 * @param {String} $color 三角形大小
 * @use: @include regularTriangle;
 * @use: @include regularTriangle(left, red, 2rem);
 */
@mixin regularTriangle($direction:bottom, $color: #000, $size: 1rem) {
    @extend %triangleBase;
    border-width: $size;

    //向右
    @if $direction==right {
        border-style: dashed dashed dashed solid;
        border-color: transparent transparent transparent $color;
    }

    //向左
    @if $direction==left {
        border-style: dashed solid dashed dashed;
        border-color: transparent $color transparent transparent;
    }

    //向上
    @if $direction==top {
        border-style: dashed dashed solid dashed;
        border-color: transparent transparent $color transparent;
    }

    //向下
    @if $direction==bottom {
        border-style: solid dashed dashed dashed;
        border-color: $color transparent transparent transparent;
    }
}

/**
 * @name: shadow
 * @desc: 边框阴影
 * @param {String} $x 阴影x轴偏移
 * @param {String} $y 阴影y轴偏移
 * @param {String} $shadowColor 阴影颜色
 * @param {String} $spread 扩散大小
 * @use: @include shadow;
 * @use: @include shadow(5px);
 * @use: @include shadow(5px, 3px, red);
 * @use: @include shadow(5px, 3px, red, 10px);
 */
@mixin shadow($x: pxToRem(3), $y: $x, $shadowColor: #cccccc, $spread:pxToRem(4)) {
    box-shadow: $x $y $spread $shadowColor;
}

/**
 * @name: keyframes
 * @desc: 动画keyframes兼容性
 * @param {String} $animationName 动画名称
 * @use: @include keyframes(move-the-object) {100% { transform: translateX(200px); }}
 */
@mixin keyframes($animationName) {
    @-webkit-keyframes #{$animationName} {
        @content;
    }

    @-moz-keyframes #{$animationName} {
        @content;
    }

    @-o-keyframes #{$animationName} {
        @content;
    }

    @keyframes #{$animationName} {
        @content;
    }
}

/**
 * @name: miniFont
 * @desc: 小于12px的文字 取值范围 0-12
 * @param {String} $font-size
 * @use: @include miniFont(12)
 */
@mixin miniFont($font-size:12) {
    $scale: $font-size/12;
    transform-style: preserve-3d;
    transform: scale3d($scale, $scale, $scale);
}

/**
 * @name: select
 * @desc: 用户是否可用选中文本
 * @param {Boolean} $operation 是否可选
 * @use: @include select; 不可选中
 * @use: @include select(true); 可选中
 */
@mixin select($operation:false) {
    @if $operation {
        user-select: text;
    }

    @else {
        user-select: none;
    }
}

/**
 * @name: gradient
 * @desc: 渐变背景色
 * @param {String} $colors 颜色数组
 * @param {String} $direction 渐变方向
 * @use: @include gradient(red blue);
 * @use: @include gradient(red blue, 90deg);
 */
@mixin gradient($colors:transparent, $direction:0deg) {
    background-image: linear-gradient($direction, getGradientString($colors));
}

/**
 * @name: gradient-border
 * @desc: 带圆角渐变色边框实现，需要在父元素里嵌套一个class名为content的子元素
 * @param {String} $border-width 边框宽度
 * @param {String} $radius 圆角度数
 * @param {String} $colors 渐变色列表
 * @param {String} $direction 渐变色方向
 * @use: @include gradient-border(1px, 10px, red yellow, vertical); 垂直渐变
 * @use: @include gradient-border(1px, 10px, red yellow, horizontal); 水平渐变
 */
@mixin gradient-border($border-width:1px, $radius:0, $colors:transparent, $direction:vertical) {
    // 圆角
    border-radius: $radius;
    // 溢出隐藏
    overflow: hidden;
    // 怪异盒模型
    box-sizing: border-box;
    position: relative;
    // horizontal水平方向 vertical垂直方向
    $deg: if($direction=='vertical', 0deg, 90deg);
    // 渐变颜色尺起始颜色
    $color-start: nth($colors, 1);
    // 渐变颜色尺结束颜色
    $color-end: nth($colors, length($colors));

    @include before {
        @include absolute(if($direction=='vertical', top-center, right-center));
        @include missing-border($border-width, $radius, $color-end, if($direction=='vertical', top, right), $direction);
    }

    @include after {
        @include absolute(if($direction=='vertical', bottom-center, left-center));
        @include missing-border($border-width, $radius, $color-start, if($direction=='vertical', bottom, left), $direction);
    }

    .content {
        @include wh;
        border-radius: $radius;
        box-sizing: border-box;
        border: $border-width solid;
        border-image: linear-gradient($deg, getGradientString($colors)) 30 30;
        position: relative;
    }
}

/**
 * @name: before
 * @desc: before伪类添加
 * @use: @include before{ width: 20px; height: 20px; }
 */
@mixin before {
    &::before {
        content: '';
        display: block;
        @content;
    }
}

/**
 * @name: after
 * @desc: after伪类添加
 * @use: @include after{ width: 20px; height: 20px; }
 */
@mixin after {
    &::after {
        content: '';
        display: block;
        @content;
    }
}

@mixin title-style($name) {
    font: {
        size: var(--#{$name}-title-font-size);
        weight: var(--#{$name}-title-font-weight);
        family: var(--#{$name}-title-font-family);
    }

    color: var(--#{$name}-title-font-color);
    letter-spacing: var(--#{$name}-title-letter-spacing);
    transform: translate(var(--#{$name}-title-font-position));
}

/**
 * @name: console
 * @desc: 打印SCSS日志
 * @param {any} $log 打印内容
 * @use: @include console(true);
 */
@mixin console($log) {
    &::before {
        content: 'log ->#{$log}' !important;
    }
}

@mixin demoBox($showBorder:true) {
    .demo-box {
        @include wh;
        @include flexCenter;
        position: relative;

        @if $showBorder {
            @include after {
                @include absolute;
                @include wh;
                border: pxToRem(1) dashed rgba(#fff, 0.2);
                box-sizing: border-box;
            }
        }


    }
}